/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-misused-promises */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */

import Head from 'next/head'
import { AdminPageLayout } from '~/components/adminLayout'
import { ArticleCard } from '~/components/ArticleCard'
import { SidebarCard } from '~/components/SidebarCard'
import { Pinecone } from '~/components/Pinecone'
import { Scraper } from '~/components/Scraper'
import type { GetServerSideProps } from 'next'

export type HomeProps = {
  infoblobs: InfoblobProps[]
  pinecone: PineconeProps
}

export type PineconeProps = {
  name: string
  region: string
  dimensions: string
  vectors: string
}

export type InfoblobProps = {
  title: string
  content: string
  url: string
}
export default function Home({
  infoblobs,
  pinecone,
}: {
  infoblobs: InfoblobProps[]
  pinecone: PineconeProps
}) {
  return (
    <>
      <Head>
        <title>AskIT</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AdminPageLayout>
        <div className="flex h-full w-1/3 flex-col gap-1 overflow-hidden p-1 text-slate-200">
          <SidebarCard title="Service Portal Scraper">
            <Scraper />
          </SidebarCard>

          <SidebarCard title="Pinecone Index">
            <Pinecone
              name={pinecone.name}
              region={pinecone.region}
              dimensions={pinecone.dimensions}
              vectors={pinecone.vectors}
            />
          </SidebarCard>
        </div>

        <div className="flex h-full w-full flex-col bg-slate-700">
          <div className="w-full flex-nowrap border-b border-slate-800 bg-slate-600 p-2 text-center text-slate-200">
            Local Scraped Content
          </div>
          <div className="flex w-full flex-wrap justify-evenly gap-2 overflow-y-auto py-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-slate-500 scrollbar-thumb-rounded-lg">
            {infoblobs &&
              infoblobs.map(({ title, content, url }) => (
                <ArticleCard key={title + url} title={title} url={url} content={content} />
              ))}
          </div>
        </div>
      </AdminPageLayout>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async () => {
  let infoblobs = null
  let pinecone = null
  try {
    const scraperRes = await fetch('http://localhost:5001/api/data', {
      headers: {
        'x-scaper-key': `${process.env.SCRAPER_KEY}`,
      },
    })

    const pineconeRes = await fetch(
      `https://${process.env.PINECONE_INDEX}-${process.env.PINECONE_PROJECT_ID}.svc.${process.env.PINECONE_ENVIRONMENT}.pinecone.io/describe_index_stats`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Api-Key': `${process.env.PINECONE_API_KEY}`,
        },
      }
    )

    pinecone = await pineconeRes.json()
    infoblobs = await scraperRes.json()
  } catch (error) {
    console.log(error)
    pinecone = {
      name: 'Error fetching data',
      region: 'Error fetching data',
      dimensions: 0,
      vectors: 0,
    }
  }

  return {
    props: {
      infoblobs,
      pinecone: {
        name: process.env.PINECONE_INDEX,
        region: process.env.PINECONE_ENVIRONMENT,
        dimensions: pinecone.dimension,
        vectors: pinecone.namespaces[''].vectorCount,
      },
    },
  }
}
